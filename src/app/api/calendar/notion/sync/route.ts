import { NextRequest, NextResponse } from 'next/server'

export async function POST(request: NextRequest) {
  try {
    const { accessToken, databaseId } = await request.json()

    if (!accessToken) {
      return NextResponse.json(
        { error: 'Missing access token' },
        { status: 400 }
      )
    }

    // If no specific database ID provided, search for calendar databases
    let databases = []
    
    if (!databaseId) {
      // Search for databases that could be calendars
      const searchResponse = await fetch('https://api.notion.com/v1/search', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'Content-Type': 'application/json',
          'Notion-Version': '2022-06-28'
        },
        body: JSON.stringify({
          filter: {
            property: 'object',
            value: 'database'
          },
          page_size: 100
        })
      })

      if (!searchResponse.ok) {
        const errorText = await searchResponse.text()
        console.error('Notion search failed:', errorText)
        return NextResponse.json(
          { error: 'Failed to search Notion databases' },
          { status: 500 }
        )
      }

      const searchData = await searchResponse.json()
      
      // Filter for databases that might be calendars (have date properties)
      databases = searchData.results.filter((db: any) => {
        const properties = db.properties || {}
        return Object.values(properties).some((prop: any) => 
          prop.type === 'date' || prop.type === 'created_time' || prop.type === 'last_edited_time'
        )
      })

      if (databases.length === 0) {
        return NextResponse.json({
          success: true,
          events: [],
          databases: [],
          message: 'No calendar databases found'
        })
      }
    }

    // Get events from the first suitable database (or specified database)
    const targetDatabaseId = databaseId || databases[0]?.id
    
    if (!targetDatabaseId) {
      return NextResponse.json({
        success: true,
        events: [],
        message: 'No suitable database found'
      })
    }

    // Query the database for calendar events
    const eventsResponse = await fetch(`https://api.notion.com/v1/databases/${targetDatabaseId}/query`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${accessToken}`,
        'Content-Type': 'application/json',
        'Notion-Version': '2022-06-28'
      },
      body: JSON.stringify({
        page_size: 100
      })
    })

    if (!eventsResponse.ok) {
      const errorText = await eventsResponse.text()
      console.error('Notion database query failed:', errorText)
      return NextResponse.json(
        { error: 'Failed to query Notion database' },
        { status: 500 }
      )
    }

    const eventsData = await eventsResponse.json()

    // Convert Notion pages to calendar events
    const events = eventsData.results.map((page: any) => {
      const properties = page.properties || {}
      
      // Find title property
      const titleProp = Object.values(properties).find((prop: any) => 
        prop.type === 'title'
      ) as any
      
      // Find date property  
      const dateProp = Object.values(properties).find((prop: any) => 
        prop.type === 'date'
      ) as any

      // Extract title
      const title = titleProp?.title?.[0]?.plain_text || 'Untitled Event'
      
      // Extract dates
      const startTime = dateProp?.date?.start || page.created_time
      const endTime = dateProp?.date?.end || startTime
      
      // Check if it's an all-day event
      const isAllDay = dateProp?.date?.start && !dateProp.date.start.includes('T')

      return {
        id: page.id,
        title,
        description: `Notion page: ${page.url}`,
        startTime,
        endTime,
        isAllDay,
        type: 'appointment',
        status: 'scheduled',
        metadata: {
          notionPageId: page.id,
          notionDatabaseId: targetDatabaseId,
          notionUrl: page.url,
          autoGenerated: false
        },
        createdAt: page.created_time,
        updatedAt: page.last_edited_time
      }
    })

    return NextResponse.json({
      success: true,
      events,
      databases: databases.map((db: any) => ({
        id: db.id,
        title: db.title?.[0]?.plain_text || 'Untitled Database',
        url: db.url
      })),
      syncedAt: new Date().toISOString()
    })

  } catch (error) {
    console.error('Notion Calendar sync error:', error)
    return NextResponse.json(
      { error: 'Failed to sync Notion Calendar' },
      { status: 500 }
    )
  }
}