import { NextRequest, NextResponse } from 'next/server'
import { google } from 'googleapis'

export async function POST(request: NextRequest) {
  try {
    const { accessToken, refreshToken, calendarId } = await request.json()

    if (!accessToken || !calendarId) {
      return NextResponse.json(
        { error: 'Missing required credentials' },
        { status: 400 }
      )
    }

    // Validate environment variables
    if (!process.env.GOOGLE_CLIENT_ID || !process.env.GOOGLE_CLIENT_SECRET || !process.env.GOOGLE_REDIRECT_URI) {
      console.error('Missing Google OAuth environment variables')
      return NextResponse.json(
        { error: 'Server configuration error: Missing Google OAuth credentials. Please check environment variables.' },
        { status: 500 }
      )
    }

    const oauth2Client = new google.auth.OAuth2(
      process.env.GOOGLE_CLIENT_ID,
      process.env.GOOGLE_CLIENT_SECRET,
      process.env.GOOGLE_REDIRECT_URI
    )

    oauth2Client.setCredentials({
      access_token: accessToken,
      refresh_token: refreshToken
    })

    const calendar = google.calendar({ version: 'v3', auth: oauth2Client })

    // Get events from the last 30 days and next 90 days
    const timeMin = new Date()
    timeMin.setDate(timeMin.getDate() - 30)
    
    const timeMax = new Date()
    timeMax.setDate(timeMax.getDate() + 90)

    const response = await calendar.events.list({
      calendarId: calendarId,
      timeMin: timeMin.toISOString(),
      timeMax: timeMax.toISOString(),
      maxResults: 100,
      singleEvents: true,
      orderBy: 'startTime'
    })

    const events = response.data.items?.map(event => ({
      id: event.id,
      title: event.summary || 'Untitled Event',
      description: event.description || undefined,
      startTime: event.start?.dateTime || event.start?.date,
      endTime: event.end?.dateTime || event.end?.date,
      isAllDay: !event.start?.dateTime,
      location: event.location || undefined,
      attendees: event.attendees?.map(attendee => attendee.email || '') || [],
      status: event.status === 'cancelled' ? 'cancelled' : 'scheduled',
      type: 'appointment', // Default type, can be customized
      metadata: {
        googleEventId: event.id,
        googleCalendarId: calendarId,
        autoGenerated: false
      },
      createdAt: event.created || new Date().toISOString(),
      updatedAt: event.updated || new Date().toISOString()
    })) || []

    return NextResponse.json({
      success: true,
      events,
      syncedAt: new Date().toISOString()
    })

  } catch (error: any) {
    console.error('Google Calendar sync error:', error)

    // Handle token refresh if needed
    if (error?.code === 401 || error?.response?.status === 401) {
      return NextResponse.json(
        { error: 'Token expired', requiresReauth: true },
        { status: 401 }
      )
    }

    // Handle specific Google API errors
    if (error?.response?.data?.error) {
      const googleError = error.response.data.error
      console.error('Google API error details:', googleError)

      return NextResponse.json(
        {
          error: `Google Calendar API error: ${googleError.message || googleError}`,
          details: googleError
        },
        { status: error.response.status || 500 }
      )
    }

    // Generic error with more details
    const errorMessage = error?.message || 'Unknown error occurred'
    return NextResponse.json(
      {
        error: `Failed to sync Google Calendar: ${errorMessage}`,
        details: process.env.NODE_ENV === 'development' ? error : undefined
      },
      { status: 500 }
    )
  }
}